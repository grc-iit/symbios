name: CMake

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-latest
    container:
      image: jcernuda/symbios:1.0.0
      ports: 
        - 9000:9000
    strategy:
      matrix:
        mongodb-version: [4.4]
    #services:
          # Label used to access the service container
          #redis:
            # Docker Hub image
            #image: redis
            # Set health checks to wait until redis has started
            #options: >-
              #--health-cmd "redis-cli ping"
              #--health-interval 10s
              #--health-timeout 5s
              #--health-retries 5
            #ports:
              # Maps port 6379 on service container to the host
              #- 6379:6379
    #- name: Start MongoDB
      #uses: supercharge/mongodb-github-action@1.3.0
      #with:
        #mongodb-version: ${{ matrix.mongodb-version }}

    steps:
    - uses: actions/checkout@v2
    - name: Create Build Environment
      env:
        GITHUB_WORKSPACE: ${{runner.workspace}}
      run: |
        export CXXFLAGS="$CXXFLAGS -I/software/install/include/mongocxx/v_noabi -I/software/install/include/bsoncxx/v_noabi"
        export CFLAGS="$CFLAGS -I/software/install/include/mongocxx/v_noabi -I/software/install/include/bsoncxx/v_noabi"
        echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
        echo "runner.workspace: ${{runner.workspace}}"
        echo "INSTALL_DIR: ${INSTALL_DIR}"
        echo "PATH: ${PATH}"
        echo "LD_LIBRARY_PATH: ${LD_LIBRARY_PATH}"
        echo "CFLAGS: ${CFLAGS}"
        echo "CXXFLAGS: ${CXXFLAGS}"
        echo "LDFLAGS: ${LDFLAGS}"
        mkdir -p ${GITHUB_WORKSPACE}/build
        cd ${GITHUB_WORKSPACE}/build
        cmake ${GITHUB_WORKSPACE} -DCMAKE_BUILD_TYPE=$BUILD_TYPE
        cmake --build . --config $
    
    - name: Test
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        source_dir=${GITHUB_WORKSPACE}
        log_dir=${HOME}/work/log
        mkdir -p $log_dir
        echo "${source_dir}/build/symbios_server ${source_dir}/conf/symbios.conf"
        echo "${source_dir}/build/symbios_server ${source_dir}/conf/symbios.conf" > ${log_dir}/server.log
        nohup ${source_dir}/build/symbios_server ${source_dir}/conf/symbios.conf >> ${log_dir}/server.log 2>&1 &
        SERVER_PID=$!
        echo $SERVER_PID > ${log_dir}/server.lock
        echo "sleeping for 5 seconds"
        sleep 5
        echo "$source_dir/build/test/unit/unit_client ${source_dir}/conf/symbios.conf"
        nohup $source_dir/build/test/unit/unit_client ${source_dir}/conf/symbios.conf >> ${log_dir}/client.log 2>&1 &
        sleep 5
        cat ${log_dir}/server.log
        echo "Killing server"
        kill `cat ${log_dir}/server.lock`
        rm ${log_dir}/server.lock
