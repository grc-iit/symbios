name: CMake

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-latest
    services:
          # Label used to access the service container
          redis:
            # Docker Hub image
            image: redis
            # Set health checks to wait until redis has started
            options: >-
              --health-cmd "redis-cli ping"
              --health-interval 10s
              --health-timeout 5s
              --health-retries 5
            ports:
              # Maps port 6379 on service container to the host
              - 6379:6379
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v1
      
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build
      
    - name: MongoDB in GitHub Actions
      # You may pin to the exact commit or the version.
      #https://github.com/supercharge/mongodb-github-action
      # uses: supercharge/mongodb-github-action@310bd1bbeb878d9de3e54ee492cbd9643b1e8875
      uses: supercharge/mongodb-github-action@1.3.0
      with:
        # MongoDB version to use (default "latest")
        mongodb-version: latest# optional, default is latest

    - name: Install dependencies
      shell: bash
      run: |
        echo $GITHUB_WORKSPACE
        export SOFTWARE_DIR=$HOME/work/software
        export CURRENT=`pwd`
        mkdir -p $SOFTWARE_DIR
        mkdir -p $SOFTWARE_DIR/source
        mkdir -p ${SOFTWARE_DIR}/install
        cd $SOFTWARE_DIR/source
        wget http://www.mpich.org/static/downloads/3.3.2/mpich-3.3.2.tar.gz
        tar zxf mpich-3.3.2.tar.gz
        cd ${SOFTWARE_DIR}/source/mpich-3.3.2/
        ./configure --prefix=${SOFTWARE_DIR}/install
        #According to this, we have two cores. https://docs.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners
        make -j 2
        make install
        cd $CURRENT
        
    - name: Lint
      shell: bash
      run: |
        pip install cpplint
        cpplint --recursive .
        
    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $
      

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
